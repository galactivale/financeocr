generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organization {
  id                      String                   @id @default(uuid())
  slug                    String                   @unique
  name                    String
  legalName               String?                  @map("legal_name")
  taxId                   String?                  @map("tax_id")
  subscriptionTier        String                   @default("trial") @map("subscription_tier")
  subscriptionStatus      String                   @default("active") @map("subscription_status")
  subscriptionStartedAt   DateTime?                @map("subscription_started_at")
  subscriptionExpiresAt   DateTime?                @map("subscription_expires_at")
  settings                Json                     @default("{}")
  branding                Json                     @default("{}")
  features                Json                     @default("{}")
  email                   String?
  phone                   String?
  website                 String?
  addressLine1            String?                  @map("address_line1")
  addressLine2            String?                  @map("address_line2")
  city                    String?
  state                   String?
  postalCode              String?                  @map("postal_code")
  country                 String                   @default("US")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  createdBy               String?                  @map("created_by")
  alerts                  Alert[]
  auditLogs               AuditLog[]
  auditTrails             AuditTrail[]
  businessLocations       BusinessLocation[]
  businessProfiles        BusinessProfile[]
  clientStates            ClientState[]
  clients                 Client[]
  communications          Communication[]
  complianceStandards     ComplianceStandard[]
  consultations           Consultation[]
  contacts                Contact[]
  customerDemographics    CustomerDemographics[]
  dataProcessing          DataProcessing[]
  documents               Document[]
  geographicDistributions GeographicDistribution[]
  integrations            Integration[]
  nexusActivities         NexusActivity[]
  nexusAlerts             NexusAlert[]
  organizationMetadata    OrganizationMetadata[]
  performanceMetrics      PerformanceMetric[]
  professionalDecisions   ProfessionalDecision[]
  regulatoryChanges       RegulatoryChange[]
  revenueBreakdowns       RevenueBreakdown[]
  tasks                   Task[]
  users                   User[]
  generatedDashboards     GeneratedDashboard[]
  decisionTables          DecisionTable[]

  @@map("organizations")
}

model User {
  id                    String                 @id @default(uuid())
  organizationId        String                 @map("organization_id")
  email                 String
  passwordHash          String                 @map("password_hash")
  mfaEnabled            Boolean                @default(false) @map("mfa_enabled")
  mfaSecret             String?                @map("mfa_secret")
  firstName             String?                @map("first_name")
  lastName              String?                @map("last_name")
  displayName           String?                @map("display_name")
  avatarUrl             String?                @map("avatar_url")
  title                 String?
  department            String?
  cpaLicense            String?                @map("cpa_license")
  cpaState              String?                @map("cpa_state")
  cpaExpiration         DateTime?              @map("cpa_expiration")
  role                  String
  status                String                 @default("pending")
  lastLogin             DateTime?              @map("last_login")
  loginCount            Int                    @default(0) @map("login_count")
  createdAt             DateTime               @default(now()) @map("created_at")
  updatedAt             DateTime               @updatedAt @map("updated_at")
  createdBy             String?                @map("created_by")
  assignedAlerts        Alert[]
  managedClients        Client[]               @relation("ClientAssignedManager")
  assignedClients       Client[]               @relation("ClientAssignedPartner")
  approvedDocuments     Document[]             @relation("DocumentApprover")
  reviewedDocuments     Document[]             @relation("DocumentReviewer")
  uploadedDocuments     Document[]             @relation("DocumentUploader")
  createdDecisions      ProfessionalDecision[]
  peerReviewedDecisions ProfessionalDecision[] @relation("DecisionPeerReviewer")
  assignedTasks         Task[]
  userPermissions       UserPermission[]
  userSessions          UserSession[]
  organization          Organization           @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, email])
  @@map("users")
}

model Client {
  id                      String                   @id @default(uuid())
  organizationId          String                   @map("organization_id")
  name                    String
  slug                    String                   @unique
  legalName               String?                  @map("legal_name")
  taxId                   String?                  @map("tax_id")
  industry                String?
  foundedYear             Int?
  employeeCount           Int?                     @map("employee_count")
  annualRevenue           Decimal?                 @map("annual_revenue")
  fiscalYearEnd           DateTime?                @map("fiscal_year_end")
  riskLevel               String?                  @map("risk_level")
  penaltyExposure         Decimal?                 @map("penalty_exposure")
  qualityScore            Int?                     @map("quality_score")
  assignedPartner         String?                  @map("assigned_partner")
  assignedManager         String?                  @map("assigned_manager")
  assignedStaff           String[]                 @default([]) @map("assigned_staff")
  assignedSince           DateTime?                @map("assigned_since")
  lastReview              DateTime?                @map("last_review")
  nextReview              DateTime?                @map("next_review")
  primaryContactName      String?                  @map("primary_contact_name")
  primaryContactEmail     String?                  @map("primary_contact_email")
  primaryContactPhone     String?                  @map("primary_contact_phone")
  addressLine1            String?                  @map("address_line1")
  addressLine2            String?                  @map("address_line2")
  city                    String?
  state                   String?
  postalCode              String?                  @map("postal_code")
  country                 String                   @default("US")
  status                  String                   @default("active")
  avatarUrl               String?                  @map("avatar_url")
  notes                   String?
  tags                    String[]
  customFields            Json                     @default("{}") @map("custom_fields")
  createdAt               DateTime                 @default(now()) @map("created_at")
  updatedAt               DateTime                 @updatedAt @map("updated_at")
  createdBy               String?                  @map("created_by")
  alerts                  Alert[]
  auditTrails             AuditTrail[]
  businessLocations       BusinessLocation[]
  businessProfile         BusinessProfile?
  clientStates            ClientState[]
  assignedManagerUser     User?                    @relation("ClientAssignedManager", fields: [assignedManager], references: [id])
  assignedPartnerUser     User?                    @relation("ClientAssignedPartner", fields: [assignedPartner], references: [id])
  organization            Organization             @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  communications          Communication[]
  consultations           Consultation[]
  contacts                Contact[]
  customerDemographics    CustomerDemographics?
  dataProcessing          DataProcessing[]
  documents               Document[]
  geographicDistributions GeographicDistribution[]
  nexusActivities         NexusActivity[]
  nexusAlerts             NexusAlert[]
  professionalDecisions   ProfessionalDecision[]
  revenueBreakdowns       RevenueBreakdown[]
  tasks                   Task[]
  decisionTables          DecisionTable[]

  @@index([slug])
  @@map("clients")
}

model Alert {
  id                String          @id @default(uuid())
  organizationId    String          @map("organization_id")
  clientId          String?         @map("client_id")
  title             String
  description       String?
  issue             String?
  stateCode         String?         @map("state_code")
  stateName         String?         @map("state_name")
  currentAmount     Decimal?        @map("current_amount")
  thresholdAmount   Decimal?        @map("threshold_amount")
  penaltyRisk       Decimal?        @map("penalty_risk")
  priority          String
  severity          String?
  status            String          @default("new")
  type              String?
  category          String?
  deadline          DateTime?
  detectedAt        DateTime        @default(now()) @map("detected_at")
  resolvedAt        DateTime?       @map("resolved_at")
  assignedTo        String?         @map("assigned_to")
  assignedAt        DateTime?       @map("assigned_at")
  actions           String[]
  resolutionNotes   String?         @map("resolution_notes")
  affectedTenants   String[]        @map("affected_tenants")
  affectedServices  String[]        @map("affected_services")
  usersAffected     Int?            @map("users_affected")
  estimatedDowntime String?         @map("estimated_downtime")
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  createdBy         String?         @map("created_by")
  alertActions      AlertAction[]
  assignedUser      User?           @relation(fields: [assignedTo], references: [id])
  client            Client?         @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization      Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  communications    Communication[]
  consultations     Consultation[]

  @@map("alerts")
}

model Task {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  clientId       String?      @map("client_id")
  title          String
  description    String?
  category       String?
  type           String?
  priority       String?
  status         String       @default("pending")
  assignedTo     String?      @map("assigned_to")
  assignedBy     String?      @map("assigned_by")
  assignedAt     DateTime?    @map("assigned_at")
  dueDate        DateTime?    @map("due_date")
  startedAt      DateTime?    @map("started_at")
  completedAt    DateTime?    @map("completed_at")
  estimatedHours Decimal?     @map("estimated_hours")
  actualHours    Decimal?     @map("actual_hours")
  progress       Int          @default(0)
  stateCode      String?      @map("state_code")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  createdBy      String?      @map("created_by")
  taskSteps      TaskStep[]
  assignedUser   User?        @relation(fields: [assignedTo], references: [id])
  client         Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Document {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  clientId         String?      @map("client_id")
  name             String
  description      String?
  type             String?
  category         String?
  fileName         String?      @map("file_name")
  fileSize         BigInt?      @map("file_size")
  fileType         String?      @map("file_type")
  fileUrl          String?      @map("file_url")
  filePath         String?      @map("file_path")
  status           String       @default("draft")
  version          Int          @default(1)
  parentDocumentId String?      @map("parent_document_id")
  visibility       String       @default("private")
  tags             String[]
  metadata         Json         @default("{}")
  uploadedAt       DateTime     @default(now()) @map("uploaded_at")
  uploadedBy       String?      @map("uploaded_by")
  reviewedBy       String?      @map("reviewed_by")
  reviewedAt       DateTime?    @map("reviewed_at")
  approvedBy       String?      @map("approved_by")
  approvedAt       DateTime?    @map("approved_at")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  approvedByUser   User?        @relation("DocumentApprover", fields: [approvedBy], references: [id])
  client           Client?      @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  reviewedByUser   User?        @relation("DocumentReviewer", fields: [reviewedBy], references: [id])
  uploadedByUser   User?        @relation("DocumentUploader", fields: [uploadedBy], references: [id])

  @@map("documents")
}

model ProfessionalDecision {
  id                    String       @id @default(uuid())
  organizationId        String       @map("organization_id")
  clientId              String       @map("client_id")
  decisionDate          DateTime     @map("decision_date")
  decisionType          String       @map("decision_type")
  decisionSummary       String       @map("decision_summary")
  professionalReasoning String       @map("professional_reasoning")
  riskLevel             String?      @map("risk_level")
  financialExposure     Decimal?     @map("financial_exposure")
  status                String       @default("draft")
  decisionMakerId       String?      @map("decision_maker_id")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  peerReviewerId        String?      @map("peer_reviewer_id")
  client                Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  decisionMaker         User?        @relation(fields: [decisionMakerId], references: [id])
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  peerReviewer          User?        @relation("DecisionPeerReviewer", fields: [peerReviewerId], references: [id])

  @@map("professional_decisions")
}

model UserSession {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserPermission {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  resource  String
  action    String
  granted   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, resource, action])
  @@map("user_permissions")
}

model TaskStep {
  id            String    @id @default(uuid())
  taskId        String    @map("task_id")
  title         String
  description   String?
  stepOrder     Int       @map("step_order")
  completed     Boolean   @default(false)
  required      Boolean   @default(true)
  completedAt   DateTime? @map("completed_at")
  completedBy   String?   @map("completed_by")
  estimatedTime Int?      @map("estimated_time")
  createdAt     DateTime  @default(now()) @map("created_at")
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_steps")
}

model AlertAction {
  id        String   @id @default(uuid())
  alertId   String   @map("alert_id")
  userId    String?  @map("user_id")
  action    String
  details   String?
  oldValue  String?  @map("old_value")
  newValue  String?  @map("new_value")
  createdAt DateTime @default(now()) @map("created_at")
  alert     Alert    @relation(fields: [alertId], references: [id], onDelete: Cascade)

  @@map("alert_actions")
}

model ComplianceStandard {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  standardName     String       @map("standard_name")
  standardCode     String?      @map("standard_code")
  description      String?
  category         String?
  status           String?
  lastReviewDate   DateTime?    @map("last_review_date")
  nextReviewDate   DateTime?    @map("next_review_date")
  reviewedBy       String?      @map("reviewed_by")
  documentationUrl String?      @map("documentation_url")
  complianceNotes  String?      @map("compliance_notes")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("compliance_standards")
}

model RegulatoryChange {
  id                  String       @id @default(uuid())
  organizationId      String       @map("organization_id")
  title               String
  description         String?
  stateCode           String?      @map("state_code")
  federal             Boolean      @default(false)
  effectiveDate       DateTime?    @map("effective_date")
  announcementDate    DateTime?    @map("announcement_date")
  impactLevel         String?      @map("impact_level")
  affectedClients     Int?         @map("affected_clients")
  status              String?
  regulationReference String?      @map("regulation_reference")
  documentationUrl    String?      @map("documentation_url")
  createdAt           DateTime     @default(now()) @map("created_at")
  updatedAt           DateTime     @updatedAt @map("updated_at")
  organization        Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("regulatory_changes")
}

model Integration {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  name             String
  type             String
  provider         String?
  config           Json         @default("{}")
  credentials      Json         @default("{}")
  status           String       @default("inactive")
  lastSync         DateTime?    @map("last_sync")
  syncFrequency    String?      @map("sync_frequency")
  nextSync         DateTime?    @map("next_sync")
  errorCount       Int          @default(0) @map("error_count")
  lastError        String?      @map("last_error")
  lastErrorAt      DateTime?    @map("last_error_at")
  performanceScore Int?         @map("performance_score")
  version          String?
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  createdBy        String?      @map("created_by")
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

model PerformanceMetric {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  metricDate     DateTime     @map("metric_date")
  metricType     String       @map("metric_type")
  value          Decimal?
  target         Decimal?
  variance       Decimal?
  unit           String?
  category       String?
  tags           String[]
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, metricDate, metricType])
  @@map("performance_metrics")
}

model AuditLog {
  id             String        @id @default(uuid())
  organizationId String?       @map("organization_id")
  userId         String?       @map("user_id")
  action         String
  resourceType   String        @map("resource_type")
  resourceId     String?       @map("resource_id")
  oldValues      Json?         @map("old_values")
  newValues      Json?         @map("new_values")
  ipAddress      String?       @map("ip_address")
  userAgent      String?       @map("user_agent")
  details        String?
  severity       String?
  createdAt      DateTime      @default(now()) @map("created_at")
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("audit_log")
}

model OrganizationMetadata {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  key            String
  value          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([organizationId, key])
  @@map("organization_metadata")
}

model ClientState {
  id                   String       @id @default(uuid())
  clientId             String       @map("client_id")
  organizationId       String       @map("organization_id")
  stateCode            String       @map("state_code")
  stateName            String       @map("state_name")
  status               String       @default("monitoring")
  registrationRequired Boolean      @default(false) @map("registration_required")
  registrationDate     DateTime?    @map("registration_date")
  registrationNumber   String?      @map("registration_number")
  thresholdAmount      Decimal?     @map("threshold_amount")
  currentAmount        Decimal      @default(0) @map("current_amount")
  lastUpdated          DateTime     @default(now()) @map("last_updated")
  notes                String?
  createdAt            DateTime     @default(now()) @map("created_at")
  updatedAt            DateTime     @updatedAt @map("updated_at")
  client               Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([clientId, stateCode])
  @@index([clientId])
  @@index([stateCode])
  @@index([status])
  @@map("client_states")
}

model StateTaxInfo {
  id                   String   @id @default(uuid())
  stateCode            String   @unique @map("state_code")
  stateName            String   @map("state_name")
  thresholdAmount      Decimal  @map("threshold_amount")
  registrationDeadline Int      @default(30) @map("registration_deadline")
  penaltyRate          Decimal  @default(0.1) @map("penalty_rate")
  isActive             Boolean  @default(true) @map("is_active")
  lastUpdated          DateTime @default(now()) @map("last_updated")
  notes                String?
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")

  @@index([stateCode])
  @@map("state_tax_info")
}

model NexusAlert {
  id              String       @id @default(uuid())
  clientId        String       @map("client_id")
  organizationId  String       @map("organization_id")
  stateCode       String       @map("state_code")
  alertType       String       @map("alert_type")
  priority        String       @default("medium")
  status          String       @default("open")
  title           String
  description     String?
  thresholdAmount Decimal?     @map("threshold_amount")
  currentAmount   Decimal      @default(0) @map("current_amount")
  deadline        DateTime?
  penaltyRisk     Decimal?     @map("penalty_risk")
  isActive        Boolean      @default(true) @map("is_active")
  acknowledgedAt  DateTime?    @map("acknowledged_at")
  acknowledgedBy  String?      @map("acknowledged_by")
  resolvedAt      DateTime?    @map("resolved_at")
  resolvedBy      String?      @map("resolved_by")
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  client          Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([stateCode])
  @@index([priority])
  @@index([status])
  @@index([alertType])
  @@map("nexus_alerts")
}

model NexusActivity {
  id              String       @id @default(uuid())
  clientId        String       @map("client_id")
  organizationId  String       @map("organization_id")
  stateCode       String       @map("state_code")
  activityType    String       @map("activity_type")
  title           String
  description     String?
  amount          Decimal?
  thresholdAmount Decimal?     @map("threshold_amount")
  status          String       @default("completed")
  metadata        Json?
  createdAt       DateTime     @default(now()) @map("created_at")
  client          Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([stateCode])
  @@index([activityType])
  @@index([createdAt])
  @@map("nexus_activities")
}

model DataProcessing {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  clientId       String       @map("client_id")
  fileName       String       @map("file_name")
  fileType       String       @map("file_type")
  status         String       @default("pending")
  quality        Int?
  processedAt    DateTime?    @map("processed_at")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([status])
  @@index([processedAt])
  @@map("data_processing")
}

model BusinessProfile {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  clientId         String       @unique @map("client_id")
  legalName        String       @map("legal_name")
  dbaName          String?      @map("dba_name")
  entityType       String       @map("entity_type")
  formationDate    DateTime     @map("formation_date")
  federalEin       String       @map("federal_ein")
  primaryIndustry  String       @map("primary_industry")
  naicsCode        String?      @map("naics_code")
  businessModel    String?      @map("business_model")
  marketFocus      String?      @map("market_focus")
  revenueGrowthYoy Float?       @map("revenue_growth_yoy")
  fundingStage     String?      @map("funding_stage")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  client           Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("business_profiles")
}

model Contact {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  clientId       String       @map("client_id")
  name           String
  title          String?
  email          String
  phone          String?
  mobile         String?
  role           String
  specialization String?
  notes          String?
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([role])
  @@map("contacts")
}

model BusinessLocation {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  clientId       String       @map("client_id")
  type           String
  address        String
  city           String
  state          String
  postalCode     String       @map("postal_code")
  country        String       @default("US")
  propertyType   String?      @map("property_type")
  employeeCount  Int          @map("employee_count")
  nexusRelevant  Boolean      @default(false) @map("nexus_relevant")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([type])
  @@map("business_locations")
}

model RevenueBreakdown {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  clientId       String       @map("client_id")
  category       String
  amount         Decimal
  percentage     Float
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([category])
  @@map("revenue_breakdowns")
}

model CustomerDemographics {
  id                      String       @id @default(uuid())
  organizationId          String       @map("organization_id")
  clientId                String       @unique @map("client_id")
  totalActiveCustomers    Int          @map("total_active_customers")
  averageContractValue    Decimal      @map("average_contract_value")
  customerRetentionRate   Float        @map("customer_retention_rate")
  monthlyRecurringRevenue Decimal      @map("monthly_recurring_revenue")
  createdAt               DateTime     @default(now()) @map("created_at")
  updatedAt               DateTime     @updatedAt @map("updated_at")
  client                  Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization            Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("customer_demographics")
}

model GeographicDistribution {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  clientId       String       @map("client_id")
  stateCode      String       @map("state_code")
  customerCount  Int          @map("customer_count")
  percentage     Float
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  client         Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([stateCode])
  @@map("geographic_distributions")
}

model AuditTrail {
  id                String       @id @default(uuid())
  organizationId    String       @map("organization_id")
  clientId          String       @map("client_id")
  action            String
  entityType        String       @map("entity_type")
  entityId          String?      @map("entity_id")
  entityName        String?      @map("entity_name")
  oldValues         Json?        @map("old_values")
  newValues         Json?        @map("new_values")
  changeDescription String?      @map("change_description")
  performedBy       String?      @map("performed_by")
  performedByName   String?      @map("performed_by_name")
  userRole          String?      @map("user_role")
  ipAddress         String?      @map("ip_address")
  userAgent         String?      @map("user_agent")
  sessionId         String?      @map("session_id")
  performedAt       DateTime     @default(now()) @map("performed_at")
  createdAt         DateTime     @default(now()) @map("created_at")
  client            Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([entityType])
  @@index([performedAt])
  @@index([action])
  @@map("audit_trails")
}

model Consultation {
  id               String       @id @default(uuid())
  organizationId   String       @map("organization_id")
  clientId         String       @map("client_id")
  alertId          String?      @map("alert_id")
  topic            String
  description      String?
  scheduledDate    DateTime     @map("scheduled_date")
  scheduledTime    String       @map("scheduled_time")
  duration         Int
  exposureAmount   Decimal?     @map("exposure_amount")
  exposureCurrency String       @default("USD") @map("exposure_currency")
  status           String       @default("scheduled")
  prepStatus       String       @default("pending") @map("prep_status")
  prepNotes        String?      @map("prep_notes")
  talkingPoints    String?      @map("talking_points")
  advisoryPackage  String?      @map("advisory_package")
  meetingType      String       @default("call") @map("meeting_type")
  meetingLink      String?      @map("meeting_link")
  meetingLocation  String?      @map("meeting_location")
  outcome          String?
  followUpRequired Boolean      @default(false) @map("follow_up_required")
  followUpDate     DateTime?    @map("follow_up_date")
  followUpNotes    String?      @map("follow_up_notes")
  notes            String?
  documents        String[]
  recordingUrl     String?      @map("recording_url")
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")
  completedAt      DateTime?    @map("completed_at")
  cancelledAt      DateTime?    @map("cancelled_at")
  alert            Alert?       @relation(fields: [alertId], references: [id])
  client           Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization     Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([scheduledDate])
  @@index([status])
  @@index([prepStatus])
  @@map("consultations")
}

model Communication {
  id                    String       @id @default(uuid())
  organizationId        String       @map("organization_id")
  clientId              String       @map("client_id")
  alertId               String       @map("alert_id")
  type                  String
  subject               String
  content               String
  status                String       @default("sent")
  sentDate              DateTime     @default(now()) @map("sent_date")
  deliveryDate          DateTime?    @map("delivery_date")
  readDate              DateTime?    @map("read_date")
  failureReason         String?      @map("failure_reason")
  recipientEmail        String?      @map("recipient_email")
  recipientPhone        String?      @map("recipient_phone")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  professionalReasoning String?      @map("professional_reasoning")
  alert                 Alert        @relation(fields: [alertId], references: [id], onDelete: Cascade)
  client                Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([alertId])
  @@index([status])
  @@index([type])
  @@index([sentDate])
  @@map("communications")
}

model DecisionTable {
  id                    String       @id @default(uuid())
  organizationId        String       @map("organization_id")
  clientId              String       @map("client_id")
  decisionId            String       @unique @map("decision_id")
  decisionType          String       @map("decision_type")
  decisionTitle         String       @map("decision_title")
  decisionDescription   String       @map("decision_description")
  decisionDate          DateTime     @map("decision_date")
  decisionMaker         String       @map("decision_maker")
  decisionMakerRole     String       @map("decision_maker_role")
  riskLevel             String       @map("risk_level")
  financialExposure     Decimal?     @map("financial_exposure")
  exposureCurrency      String       @default("USD") @map("exposure_currency")
  decisionRationale     String       @map("decision_rationale")
  supportingEvidence    String[]     @map("supporting_evidence")
  alternativesConsidered String[]    @map("alternatives_considered")
  peerReviewer          String?      @map("peer_reviewer")
  peerReviewDate        DateTime?    @map("peer_review_date")
  peerReviewNotes       String?      @map("peer_review_notes")
  status                String       @default("draft")
  implementationDate    DateTime?    @map("implementation_date")
  followUpRequired      Boolean      @default(false) @map("follow_up_required")
  followUpDate          DateTime?    @map("follow_up_date")
  followUpNotes         String?      @map("follow_up_notes")
  relatedAlerts         String[]     @map("related_alerts")
  relatedTasks          String[]     @map("related_tasks")
  relatedDocuments      String[]     @map("related_documents")
  tags                  String[]
  metadata              Json         @default("{}")
  createdAt             DateTime     @default(now()) @map("created_at")
  updatedAt             DateTime     @updatedAt @map("updated_at")
  client                Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  organization          Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([clientId])
  @@index([decisionType])
  @@index([decisionDate])
  @@index([status])
  @@index([riskLevel])
  @@map("decision_tables")
}

model GeneratedDashboard {
  id                String       @id @default(uuid())
  organizationId    String       @map("organization_id")
  clientName        String       @map("client_name")
  uniqueUrl         String       @unique @map("unique_url")
  clientInfo        Json         @map("client_info")
  keyMetrics        Json         @map("key_metrics")
  statesMonitored   String[]     @map("states_monitored")
  personalizedData  Json         @default("{}") @map("personalized_data")
  
  // Comprehensive generated data
  generatedClients      Json?     @map("generated_clients")
  generatedAlerts       Json?     @map("generated_alerts")
  generatedTasks        Json?     @map("generated_tasks")
  generatedAnalytics    Json?     @map("generated_analytics")
  generatedClientStates Json?     @map("generated_client_states")
  generatedNexusAlerts  Json?     @map("generated_nexus_alerts")
  generatedNexusActivities Json?  @map("generated_nexus_activities")
  generatedSystemHealth Json?     @map("generated_system_health")
  generatedReports      Json?     @map("generated_reports")
  generatedCommunications Json?   @map("generated_communications")
  generatedDecisions    Json?     @map("generated_decisions")
  
  lastUpdated       DateTime     @map("last_updated")
  isActive          Boolean      @default(true) @map("is_active")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  organization      Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([uniqueUrl])
  @@index([clientName])
  @@index([isActive])
  @@map("generated_dashboards")
}
